//
// Generated file, do not edit! Created by nedtool 5.6 from fico4omnet/scheduler/flexray/SchedulerMessage.msg.
//

#ifndef __FICO4OMNET_SCHEDULERMESSAGE_M_H
#define __FICO4OMNET_SCHEDULERMESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif


namespace FiCo4OMNeT {

/**
 * Class generated from <tt>fico4omnet/scheduler/flexray/SchedulerMessage.msg:9</tt> by nedtool.
 * <pre>
 * //
 * // abstract base message for TTEScheduler.
 * //
 * // \@see TTEScheduler
 * //
 * // \@author Till Steinbach
 * message SchedulerMessage
 * {
 * }
 * </pre>
 */
class SchedulerMessage : public ::omnetpp::cMessage
{
  protected:

  private:
    void copy(const SchedulerMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const SchedulerMessage&);

  public:
    SchedulerMessage(const char *name=nullptr, short kind=0);
    SchedulerMessage(const SchedulerMessage& other);
    virtual ~SchedulerMessage();
    SchedulerMessage& operator=(const SchedulerMessage& other);
    virtual SchedulerMessage *dup() const override {return new SchedulerMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const SchedulerMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, SchedulerMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>fico4omnet/scheduler/flexray/SchedulerMessage.msg:18</tt> by nedtool.
 * <pre>
 * //
 * // Message used for events of TTEScheduler with SchedulerMessageKind = NEW_CYCLE
 * //
 * // \@see SchedulerMessageKind
 * //
 * // \@author Till Steinbach
 * message SchedulerEvent extends SchedulerMessage
 * {
 *     \@customize(true);
 * }
 * </pre>
 *
 * SchedulerEvent_Base is only useful if it gets subclassed, and SchedulerEvent is derived from it.
 * The minimum code to be written for SchedulerEvent is the following:
 *
 * <pre>
 * class SchedulerEvent : public SchedulerEvent_Base
 * {
 *   private:
 *     void copy(const SchedulerEvent& other) { ... }

 *   public:
 *     SchedulerEvent(const char *name=nullptr, short kind=0) : SchedulerEvent_Base(name,kind) {}
 *     SchedulerEvent(const SchedulerEvent& other) : SchedulerEvent_Base(other) {copy(other);}
 *     SchedulerEvent& operator=(const SchedulerEvent& other) {if (this==&other) return *this; SchedulerEvent_Base::operator=(other); copy(other); return *this;}
 *     virtual SchedulerEvent *dup() const override {return new SchedulerEvent(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from SchedulerEvent_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(SchedulerEvent)
 * </pre>
 */
class SchedulerEvent_Base : public ::FiCo4OMNeT::SchedulerMessage
{
  protected:

  private:
    void copy(const SchedulerEvent_Base& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const SchedulerEvent_Base&);
    // make constructors protected to avoid instantiation
    SchedulerEvent_Base(const char *name=nullptr, short kind=0);
    SchedulerEvent_Base(const SchedulerEvent_Base& other);
    // make assignment operator protected to force the user override it
    SchedulerEvent_Base& operator=(const SchedulerEvent_Base& other);

  public:
    virtual ~SchedulerEvent_Base();
    virtual SchedulerEvent_Base *dup() const override {throw omnetpp::cRuntimeError("You forgot to manually add a dup() function to class SchedulerEvent");}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
};

/**
 * Enum generated from <tt>fico4omnet/scheduler/flexray/SchedulerMessage.msg:28</tt> by nedtool.
 * <pre>
 * //
 * // Enum for different SchedulerEvent messages 
 * //
 * // \@see SchedulerEvent
 * //
 * // \@author Till Steinbach
 * enum SchedulerMessageKind
 * {
 *     // Event that signals the beginning of a new cycle
 *     NEW_CYCLE = 0;
 *     // Event with a specified action time
 *     ACTION_TIME_EVENT = 1;
 *     // Event that is triggered after a specified amount of time
 *     TIMER_EVENT = 2;
 * 
 *     STATIC_EVENT = 3;
 *     DYNAMIC_EVENT = 4;
 *     NIT_EVENT = 5;
 * }
 * </pre>
 */
enum SchedulerMessageKind {
    NEW_CYCLE = 0,
    ACTION_TIME_EVENT = 1,
    TIMER_EVENT = 2,
    STATIC_EVENT = 3,
    DYNAMIC_EVENT = 4,
    NIT_EVENT = 5
};

} // namespace FiCo4OMNeT

#endif // ifndef __FICO4OMNET_SCHEDULERMESSAGE_M_H

