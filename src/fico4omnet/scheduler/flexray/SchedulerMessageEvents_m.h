//
// Generated file, do not edit! Created by nedtool 5.6 from fico4omnet/scheduler/flexray/SchedulerMessageEvents.msg.
//

#ifndef __FICO4OMNET_SCHEDULERMESSAGEEVENTS_M_H
#define __FICO4OMNET_SCHEDULERMESSAGEEVENTS_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// cplusplus {{
        #include "fico4omnet/scheduler/flexray/SchedulerEvent.h"
// }}


namespace FiCo4OMNeT {

/**
 * Class generated from <tt>fico4omnet/scheduler/flexray/SchedulerMessageEvents.msg:16</tt> by nedtool.
 * <pre>
 * //
 * // Message used for events of TTEScheduler that are triggered at a specified time in cycle (action_time).
 * // Should be created with message kind SchedulerMessageKind = ACTION_TIME_EVENT
 * //
 * // \@see SchedulerMessageKind, SchedulerEvent
 * //
 * // \@author Till Steinbach
 * message SchedulerActionTimeEvent extends SchedulerEvent
 * {
 *     // Action time in cycle for the event in number of ticks
 *     unsigned int action_time;
 *     unsigned int frameID;
 *     unsigned int cycleNr;
 *     unsigned int channel;
 *     bool syncFrameIndicator;
 * }
 * </pre>
 */
class SchedulerActionTimeEvent : public ::FiCo4OMNeT::SchedulerEvent
{
  protected:
    unsigned int action_time;
    unsigned int frameID;
    unsigned int cycleNr;
    unsigned int channel;
    bool syncFrameIndicator;

  private:
    void copy(const SchedulerActionTimeEvent& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const SchedulerActionTimeEvent&);

  public:
    SchedulerActionTimeEvent(const char *name=nullptr, short kind=0);
    SchedulerActionTimeEvent(const SchedulerActionTimeEvent& other);
    virtual ~SchedulerActionTimeEvent();
    SchedulerActionTimeEvent& operator=(const SchedulerActionTimeEvent& other);
    virtual SchedulerActionTimeEvent *dup() const override {return new SchedulerActionTimeEvent(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual unsigned int getAction_time() const;
    virtual void setAction_time(unsigned int action_time);
    virtual unsigned int getFrameID() const;
    virtual void setFrameID(unsigned int frameID);
    virtual unsigned int getCycleNr() const;
    virtual void setCycleNr(unsigned int cycleNr);
    virtual unsigned int getChannel() const;
    virtual void setChannel(unsigned int channel);
    virtual bool getSyncFrameIndicator() const;
    virtual void setSyncFrameIndicator(bool syncFrameIndicator);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const SchedulerActionTimeEvent& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, SchedulerActionTimeEvent& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>fico4omnet/scheduler/flexray/SchedulerMessageEvents.msg:32</tt> by nedtool.
 * <pre>
 * //
 * // Message used for events of TTEScheduler that are triggered after a specified time (timer).
 * // Should be created with message kind SchedulerMessageKind = TIMER_EVENT
 * //
 * // \@see SchedulerMessageKind, SchedulerEvent
 * //
 * // \@author Till Steinbach
 * message SchedulerTimerEvent extends SchedulerEvent
 * {
 *     // Time after that the event is triggered in number of ticks
 *     unsigned int timer;
 * }
 * </pre>
 */
class SchedulerTimerEvent : public ::FiCo4OMNeT::SchedulerEvent
{
  protected:
    unsigned int timer;

  private:
    void copy(const SchedulerTimerEvent& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const SchedulerTimerEvent&);

  public:
    SchedulerTimerEvent(const char *name=nullptr, short kind=0);
    SchedulerTimerEvent(const SchedulerTimerEvent& other);
    virtual ~SchedulerTimerEvent();
    SchedulerTimerEvent& operator=(const SchedulerTimerEvent& other);
    virtual SchedulerTimerEvent *dup() const override {return new SchedulerTimerEvent(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual unsigned int getTimer() const;
    virtual void setTimer(unsigned int timer);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const SchedulerTimerEvent& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, SchedulerTimerEvent& obj) {obj.parsimUnpack(b);}

} // namespace FiCo4OMNeT

#endif // ifndef __FICO4OMNET_SCHEDULERMESSAGEEVENTS_M_H

